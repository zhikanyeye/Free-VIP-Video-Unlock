document.addEventListener('DOMContentLoaded', function() {
    // 获取DOM元素
    const videoUrlInput = document.getElementById('videoUrl');
    const parseBtn = document.getElementById('parseBtn');
    const playerSection = document.getElementById('playerSection');
    const videoPlayer = document.getElementById('videoPlayer');
    const videoTitle = document.getElementById('videoTitle');
    const closePlayer = document.getElementById('closePlayer');
    const speedTestBtn = document.getElementById('speedTestBtn');
    const apiListBtn = document.getElementById('apiListBtn');
    const helpBtn = document.getElementById('helpBtn');
    const statusInfo = document.getElementById('statusInfo');
    const statusText = document.getElementById('statusText');
    const apiNameBadge = document.getElementById('apiNameBadge');
    const dplayerContainer = document.getElementById('dplayer-container');
    const iframeContainer = document.getElementById('iframe-container');

    // DPlayer 实例
    let dplayer = null;

    // 设备检测
    const deviceInfo = {
        isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
        isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent),
        isAndroid: /Android/.test(navigator.userAgent),
        isMac: /Macintosh|MacIntel|MacPPC|Mac68K/.test(navigator.platform),
        isWindows: /Win32|Win64|Windows|WinCE/.test(navigator.platform),
        isSafari: /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
        isChrome: /Chrome/.test(navigator.userAgent),
        isFirefox: /Firefox/.test(navigator.userAgent)
    };

    // 解析API接口数组 - 更新的高质量接口
    const apiList = [
        {
            name: "蜜糖解析",
            url: "https://mtjiexi.cc:966/?url=",
            priority: 1
        },
        {
            name: "盖子解析",
            url: "https://gayzyjiexi.com/play/?url=",
            priority: 2
        },
        {
            name: "豆瓣解析",
            url: "https://www.dbjiexi.com:966/jx/?url=",
            priority: 3
        },
        {
            name: "雨兔解析",
            url: "https://yutujx.com/?url=",
            priority: 4
        },
        {
            name: "大奶子解析",
            url: "https://jiexidanaizi.com/?url=",
            priority: 5
        },
        {
            name: "973解析",
            url: "https://jx.973973.xyz/?url=",
            priority: 6
        },
        {
            name: "小蚂蚁解析1",
            url: "https://jx.xmflv.com/?url=",
            priority: 7
        },
        {
            name: "小蚂蚁解析2",
            url: "https://jx.xmflv.cc/?url=",
            priority: 8
        },
        {
            name: "M1907解析",
            url: "https://z1.m1907.top/?jx=",
            priority: 9
        }
    ];

    // 接口测速结果缓存
    let speedTestResults = [];
    let bestApiIndex = 0;
    let isSpeedTesting = false;

    // 初始化设备优化
    initializeDeviceOptimizations();

    // 设备优化初始化
    function initializeDeviceOptimizations() {
        // 移动端优化
        if (deviceInfo.isMobile) {
            document.body.classList.add('mobile-device');
            
            // iOS 特殊处理
            if (deviceInfo.isIOS) {
                document.body.classList.add('ios-device');
                // 防止 iOS Safari 缩放
                const viewport = document.querySelector('meta[name="viewport"]');
                if (viewport) {
                    viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
                }
            }
            
            // Android 特殊处理
            if (deviceInfo.isAndroid) {
                document.body.classList.add('android-device');
            }
            
            // 移动端触摸优化
            addTouchOptimizations();
        }
        
        // Mac 设备优化
        if (deviceInfo.isMac) {
            document.body.classList.add('mac-device');
        }
        
        // Windows 设备优化
        if (deviceInfo.isWindows) {
            document.body.classList.add('windows-device');
        }
        
        // 浏览器特定优化
        if (deviceInfo.isSafari) {
            document.body.classList.add('safari-browser');
        }
        
        updateStatus('系统已优化适配您的设备', 'success');
    }

    // 触摸设备优化
    function addTouchOptimizations() {
        // 防止双击缩放
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function (event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
        
        // 优化触摸滚动
        document.addEventListener('touchstart', function(e) {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        }, { passive: false });
    }

    // 初始化 DPlayer
    function initializeDPlayer(videoUrl, videoInfo) {
        // 销毁之前的实例
        if (dplayer) {
            dplayer.destroy();
            dplayer = null;
        }
        
        // 显示 DPlayer 容器，隐藏 iframe
        dplayerContainer.style.display = 'block';
        iframeContainer.classList.add('d-none');
        
        // DPlayer 配置
        const dplayerConfig = {
            container: dplayerContainer,
            video: {
                url: videoUrl,
                type: 'auto',
                customType: {
                    'customHls': function (video, player) {
                        if (window.Hls && Hls.isSupported()) {
                            const hls = new Hls();
                            hls.loadSource(video.src);
                            hls.attachMedia(video);
                        }
                    }
                }
            },
            autoplay: !deviceInfo.isMobile, // 移动端不自动播放
            theme: '#2563eb',
            loop: false,
            lang: 'zh-cn',
            screenshot: false,
            hotkey: !deviceInfo.isMobile, // 移动端禁用快捷键
            preload: deviceInfo.isMobile ? 'metadata' : 'auto',
            volume: 0.8,
            mutex: true,
            contextmenu: [
                {
                    text: '视频解析工具',
                    link: window.location.href
                },
                {
                    text: '关于项目',
                    click: function () {
                        showHelpModal();
                    }
                }
            ]
        };
        
        // 移动端特殊配置
        if (deviceInfo.isMobile) {
            dplayerConfig.playbackSpeed = [0.5, 0.75, 1, 1.25, 1.5]; // 简化播放速度选项
            dplayerConfig.subtitle = false; // 移动端禁用字幕
        }
        
        try {
            dplayer = new DPlayer(dplayerConfig);
            
            // 绑定播放器事件
            bindDPlayerEvents(videoInfo);
            
            return true;
        } catch (error) {
            console.error('DPlayer 初始化失败:', error);
            showNotification('DPlayer 加载失败，使用备用播放器', 'warning');
            return false;
        }
    }

    // 绑定 DPlayer 事件
    function bindDPlayerEvents(videoInfo) {
        if (!dplayer) return;
        
        dplayer.on('loadstart', function () {
            updateStatus('视频开始加载...', 'info');
        });
        
        dplayer.on('loadeddata', function () {
            updateStatus('视频加载完成，可以播放', 'success');
        });
        
        dplayer.on('play', function () {
            updateStatus('视频正在播放', 'success');
        });
        
        dplayer.on('pause', function () {
            updateStatus('视频已暂停', 'info');
        });
        
        dplayer.on('error', function (e) {
            console.error('DPlayer 播放错误:', e);
            showNotification('播放失败，正在切换备用播放器...', 'error');
            fallbackToIframe(videoInfo);
        });
        
        // 移动端特殊事件处理
        if (deviceInfo.isMobile) {
            dplayer.on('fullscreen', function () {
                // 移动端全屏时的特殊处理
                if (screen.orientation && screen.orientation.lock) {
                    screen.orientation.lock('landscape').catch(() => {
                        // 静默失败，某些浏览器不支持
                    });
                }
            });
            
            dplayer.on('fullscreen_cancel', function () {
                // 退出全屏时解锁屏幕方向
                if (screen.orientation && screen.orientation.unlock) {
                    screen.orientation.unlock();
                }
            });
        }
    }

    // 备用播放器 (iframe)
    function fallbackToIframe(videoInfo) {
        // 隐藏 DPlayer，显示 iframe
        dplayerContainer.style.display = 'none';
        iframeContainer.classList.remove('d-none');
        
        // 设置 iframe 源
        videoPlayer.src = videoInfo.fullUrl;
        
        updateStatus('已切换到备用播放器', 'info');
    }
    
    // 解析API接口数组 - 更新的高质量接口
    const apiList = [
        {
            name: "蜜糖解析",
            url: "https://mtjiexi.cc:966/?url=",
            priority: 1
        },
        {
            name: "盖子解析",
            url: "https://gayzyjiexi.com/play/?url=",
            priority: 2
        },
        {
            name: "豆瓣解析",
            url: "https://www.dbjiexi.com:966/jx/?url=",
            priority: 3
        },
        {
            name: "雨兔解析",
            url: "https://yutujx.com/?url=",
            priority: 4
        },
        {
            name: "大奶子解析",
            url: "https://jiexidanaizi.com/?url=",
            priority: 5
        },
        {
            name: "973解析",
            url: "https://jx.973973.xyz/?url=",
            priority: 6
        },
        {
            name: "小蚂蚁解析1",
            url: "https://jx.xmflv.com/?url=",
            priority: 7
        },
        {
            name: "小蚂蚁解析2",
            url: "https://jx.xmflv.cc/?url=",
            priority: 8
        },
        {
            name: "M1907解析",
            url: "https://z1.m1907.top/?jx=",
            priority: 9
        }
    ];

    // 接口测速结果缓存
    let speedTestResults = [];
    let bestApiIndex = 0;
    let isSpeedTesting = false;
    
    // 点击解析按钮事件
    parseBtn.addEventListener('click', function() {
        parseVideo();
    });
    
    // 输入框回车事件
    videoUrlInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            parseVideo();
        }
    });
    
    // 关闭播放器
    closePlayer.addEventListener('click', function() {
        // 销毁 DPlayer 实例
        if (dplayer) {
            dplayer.destroy();
            dplayer = null;
        }
        
        // 清空 iframe
        videoPlayer.src = '';
        
        // 隐藏播放器
        playerSection.classList.add('d-none');
        
        // 重置播放器容器状态
        dplayerContainer.style.display = 'none';
        iframeContainer.classList.add('d-none');
        
        // 移除重试容器
        const retryContainer = document.querySelector('.retry-container');
        if (retryContainer) {
            retryContainer.remove();
        }
        
        updateStatus('播放器已关闭', 'info');
    });

    // 功能按钮事件
    speedTestBtn.addEventListener('click', function() {
        window.open('compatibility-test.html', '_blank');
    });

    quickSpeedTestBtn.addEventListener('click', function() {
        performQuickSpeedTest();
    });

    apiListBtn.addEventListener('click', function() {
        showApiList();
    });

    helpBtn.addEventListener('click', function() {
        showHelpModal();
    });

    // 快速测速功能（仅测试前3个接口）
    async function performQuickSpeedTest() {
        if (isSpeedTesting) return;
        
        quickSpeedTestBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> 快速测速中...';
        quickSpeedTestBtn.disabled = true;
        updateStatus('正在进行快速接口测速...', 'info');
        
        try {
            // 仅测试前3个优先级最高的接口
            const testApis = apiList.slice(0, 3);
            const testUrl = 'https://v.qq.com/x/cover/mzc00200mp8vo9l.html'; // 默认测试链接
            
            isSpeedTesting = true;
            const quickResults = [];
            
            for (let i = 0; i < testApis.length; i++) {
                const api = testApis[i];
                try {
                    const startTime = performance.now();
                    const fullUrl = api.url + encodeURIComponent(testUrl);
                    
                    updateStatus(`正在测试 ${api.name}...`, 'info');
                    
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 5000);
                    
                    await fetch(fullUrl, {
                        method: 'HEAD',
                        signal: controller.signal,
                        mode: 'no-cors',
                        cache: 'no-cache'
                    });
                    
                    clearTimeout(timeoutId);
                    const endTime = performance.now();
                    const responseTime = endTime - startTime;
                    
                    quickResults.push({
                        name: api.name,
                        responseTime: responseTime,
                        available: true
                    });
                    
                } catch (error) {
                    quickResults.push({
                        name: api.name,
                        responseTime: 10000,
                        available: false
                    });
                }
            }
            
            // 更新最佳接口索引
            const bestResult = quickResults.find(r => r.available);
            if (bestResult) {
                bestApiIndex = apiList.findIndex(api => api.name === bestResult.name);
                const avgTime = quickResults.filter(r => r.available)
                    .reduce((sum, r) => sum + r.responseTime, 0) / quickResults.filter(r => r.available).length;
                
                updateStatus(`快速测速完成！最佳接口：${bestResult.name} (${Math.round(bestResult.responseTime)}ms)`, 'success');
                showNotification(`快速测速完成，推荐使用 ${bestResult.name}`, 'success');
            } else {
                updateStatus('快速测速失败，所有接口无响应', 'error');
                showNotification('快速测速失败，建议检查网络连接', 'error');
            }
            
        } catch (error) {
            updateStatus('快速测速失败，请稍后重试', 'error');
        } finally {
            isSpeedTesting = false;
            quickSpeedTestBtn.innerHTML = '<i class="fas fa-bolt"></i> 快速测速';
            quickSpeedTestBtn.disabled = false;
        }
    }

    // 手动详细测速功能 - 基于当前视频链接进行实际测试
    async function performSpeedTestManual() {
        if (isSpeedTesting) {
            showNotification('正在进行智能测速，请稍候...', 'info');
            return;
        }

        const videoUrl = videoUrlInput.value.trim();
        if (!videoUrl) {
            showNotification('请先输入视频链接再进行测速', 'warning');
            return;
        }

        if (!isValidUrl(videoUrl)) {
            showNotification('请输入有效的视频链接', 'error');
            return;
        }
        
        speedTestBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> 详细测速中...';
        speedTestBtn.disabled = true;
        updateStatus('正在基于当前视频链接进行详细接口测速...', 'info');
        
        try {
            await performSpeedTest();
            const bestApi = apiList[bestApiIndex];
            const responseTime = speedTestResults.find(r => r.index === bestApiIndex)?.responseTime;
            const timeDisplay = responseTime ? ` (${Math.round(responseTime)}ms)` : '';
            
            updateStatus(`详细测速完成！推荐接口：${bestApi.name}${timeDisplay}`, 'success');
            showNotification(`推荐使用：${bestApi.name}${timeDisplay}`, 'success');
            
            // 显示详细结果模态框
            showDetailedSpeedResults();
        } catch (error) {
            updateStatus('详细测速失败，请稍后重试', 'error');
            showNotification('详细测速失败，请检查网络连接', 'error');
        } finally {
            speedTestBtn.innerHTML = '<i class="fas fa-tachometer-alt"></i> 详细测速';
            speedTestBtn.disabled = false;
        }
    }

    // 显示详细测速结果
    function showDetailedSpeedResults() {
        const availableApis = speedTestResults.filter(r => r.available);
        const failedApis = speedTestResults.filter(r => !r.available);
        
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="fas fa-tachometer-alt"></i> 详细测速结果</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i> 
                            基于当前视频链接的实际解析测试结果。解析视频时将自动使用最快的可用接口。
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-4 text-center">
                                <div class="h4 text-success">${availableApis.length}</div>
                                <div class="text-muted">可用接口</div>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="h4 text-danger">${failedApis.length}</div>
                                <div class="text-muted">失败接口</div>
                            </div>
                            <div class="col-md-4 text-center">
                                <div class="h4 text-primary">${availableApis.length > 0 ? Math.round(availableApis[0].responseTime) : '-'}</div>
                                <div class="text-muted">最快响应(ms)</div>
                            </div>
                        </div>
                        
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>排名</th>
                                        <th>接口名称</th>
                                        <th>响应时间</th>
                                        <th>状态</th>
                                        <th>评级</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${speedTestResults.map((result, index) => {
                                        const availableIndex = availableApis.findIndex(a => a.index === result.index);
                                        const rank = availableIndex >= 0 ? availableIndex + 1 : '-';
                                        const responseTime = result.available ? `${Math.round(result.responseTime)}ms` : '失败';
                                        const status = result.available ? '正常' : (result.error || '测试失败');
                                        const grade = result.available ? 
                                            (result.responseTime < 3000 ? '优秀' :
                                             result.responseTime < 6000 ? '良好' : '一般') : '不可用';
                                        const gradeClass = result.available ?
                                            (result.responseTime < 3000 ? 'text-success' :
                                             result.responseTime < 6000 ? 'text-warning' : 'text-info') : 'text-danger';
                                        const bestBadge = result.index === bestApiIndex && result.available ? ' 🏆' : '';
                                        
                                        return `
                                            <tr class="${result.index === bestApiIndex && result.available ? 'table-success' : ''}">
                                                <td>${rank}${bestBadge}</td>
                                                <td>${apiList[result.index].name}</td>
                                                <td>${responseTime}</td>
                                                <td><small>${status}</small></td>
                                                <td class="${gradeClass}"><small>${grade}</small></td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="mt-3">
                            <small class="text-muted">
                                <i class="fas fa-lightbulb"></i> 
                                智能解析会自动选择最快的接口。如果播放失败，系统会提供切换其他接口的选项。
                            </small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <button type="button" class="btn btn-primary" onclick="performSpeedTestManual(); bootstrap.Modal.getInstance(document.querySelector('.modal')).hide();">
                            <i class="fas fa-redo"></i> 重新测速
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        modal.addEventListener('hidden.bs.modal', function () {
            document.body.removeChild(modal);
        });
    }
                            </div>
                        ` : ''}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <a href="compatibility-test.html" class="btn btn-primary" target="_blank">
                            <i class="fas fa-external-link-alt"></i> 查看完整报告
                        </a>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        modal.addEventListener('hidden.bs.modal', function () {
            document.body.removeChild(modal);
        });
    }

    // 更新状态显示
    function updateStatus(message, type) {
        statusText.textContent = message;
        statusInfo.className = `status-info mt-4 show`;
        
        const alertDiv = statusInfo.querySelector('.alert');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : 
                                          type === 'warning' ? 'warning' : 
                                          type === 'info' ? 'info' : 'success'} d-inline-block`;
        
        // 5秒后自动隐藏
        setTimeout(() => {
            statusInfo.classList.remove('show');
        }, 5000);
    }

    // 显示帮助模态框
    function showHelpModal() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="fas fa-question-circle"></i> 使用帮助</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="accordion" id="helpAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#help1">
                                        <i class="fas fa-play me-2"></i> 如何使用？
                                    </button>
                                </h2>
                                <div id="help1" class="accordion-collapse collapse show" data-bs-parent="#helpAccordion">
                                    <div class="accordion-body">
                                        <ol>
                                            <li>复制您想要观看的VIP视频链接</li>
                                            <li>将链接粘贴到输入框中</li>
                                            <li>点击"智能解析"按钮</li>
                                            <li>系统会自动选择最快的解析接口</li>
                                            <li>如果播放失败，可以尝试切换其他接口</li>
                                        </ol>
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#help2">
                                        <i class="fas fa-list me-2"></i> 支持哪些平台？
                                    </button>
                                </h2>
                                <div id="help2" class="accordion-collapse collapse" data-bs-parent="#helpAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <ul class="list-unstyled">
                                                    <li><i class="fas fa-check text-success"></i> 爱奇艺 (iqiyi.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> 腾讯视频 (v.qq.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> 优酷 (youku.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> 芒果TV (mgtv.com)</li>
                                                </ul>
                                            </div>
                                            <div class="col-md-6">
                                                <ul class="list-unstyled">
                                                    <li><i class="fas fa-check text-success"></i> 搜狐视频 (tv.sohu.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> 哔哩哔哩 (bilibili.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> 1905电影网 (1905.com)</li>
                                                    <li><i class="fas fa-check text-success"></i> PPTV (pptv.com)</li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#help3">
                                        <i class="fas fa-tachometer-alt me-2"></i> 智能测速是什么？
                                    </button>
                                </h2>
                                <div id="help3" class="accordion-collapse collapse" data-bs-parent="#helpAccordion">
                                    <div class="accordion-body">
                                        <p>智能测速功能会自动检测所有解析接口的响应速度，选择最快的接口为您提供服务。</p>
                                        <ul>
                                            <li>🟢 绿色：响应速度快（&lt;2秒）</li>
                                            <li>🟡 黄色：响应速度中等（2-5秒）</li>
                                            <li>🔴 红色：响应速度慢（&gt;5秒）</li>
                                        </ul>
                                        <p>您也可以手动点击"接口测速"按钮重新测试。</p>
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#help4">
                                        <i class="fas fa-exclamation-triangle me-2"></i> 常见问题
                                    </button>
                                </h2>
                                <div id="help4" class="accordion-collapse collapse" data-bs-parent="#helpAccordion">
                                    <div class="accordion-body">
                                        <div class="mb-3">
                                            <strong>Q: 视频无法播放怎么办？</strong><br>
                                            A: 尝试以下方法：<br>
                                            1. 切换其他解析接口<br>
                                            2. 检查视频链接是否正确<br>
                                            3. 清除浏览器缓存后重试
                                        </div>
                                        <div class="mb-3">
                                            <strong>Q: 为什么有些视频解析失败？</strong><br>
                                            A: 可能的原因：<br>
                                            1. 视频平台更新了防护机制<br>
                                            2. 解析接口临时不可用<br>
                                            3. 网络连接问题
                                        </div>
                                        <div>
                                            <strong>Q: 本工具安全吗？</strong><br>
                                            A: 本工具完全在浏览器中运行，不会收集任何个人信息，源代码完全开源。
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <a href="https://github.com/zhikanyeye/Free-VIP-Video-Unlock" class="btn btn-primary" target="_blank">
                            <i class="fab fa-github"></i> 查看源码
                        </a>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        modal.addEventListener('hidden.bs.modal', function () {
            document.body.removeChild(modal);
        });
    }
    
    // 视频解析函数
    async function parseVideo() {
        const url = videoUrlInput.value.trim();
        
        // 验证URL
        if (!url) {
            showNotification('请输入视频链接', 'error');
            return;
        }
        
        if (!isValidUrl(url)) {
            showNotification('请输入有效的视频链接', 'error');
            return;
        }
        
        // 检测视频平台
        const platform = detectPlatform(url);
        if (!platform) {
            showNotification('不支持的视频平台，请尝试其他链接', 'error');
            return;
        }
        
        // 显示加载状态
        parseBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 智能解析中...';
        parseBtn.disabled = true;
        updateStatus('开始智能解析视频...', 'info');

        try {
            // 核心改变：每次解析都进行智能测速，使用当前视频链接进行实际测试
            updateStatus('正在智能检测最佳解析接口，请稍候...', 'info');
            await performSpeedTest();
            
            // 使用测速后选择的最佳接口
            const bestApi = apiList[bestApiIndex];
            updateStatus(`使用最佳接口 ${bestApi.name} 解析视频...`, 'info');
            
            // 构建完整的视频URL
            const fullVideoUrl = bestApi.url + encodeURIComponent(url);
            const videoInfo = {
                platform: platform,
                apiName: bestApi.name,
                originalUrl: url,
                fullUrl: fullVideoUrl
            };
            
            // 更新界面信息
            videoTitle.textContent = `正在播放: ${platform} 视频`;
            apiNameBadge.textContent = `${bestApi.name} (最佳)`;
            
            // 尝试使用 DPlayer，失败则使用 iframe
            const dplayerSuccess = deviceInfo.isMobile ? 
                false : // 移动端直接使用 iframe 更稳定
                await tryDPlayerFirst(fullVideoUrl, videoInfo);
            
            if (!dplayerSuccess) {
                fallbackToIframe(videoInfo);
            }
            
            // 显示播放器
            playerSection.classList.remove('d-none');
            
            // 恢复按钮状态
            parseBtn.innerHTML = '<i class="fas fa-search"></i> 智能解析';
            parseBtn.disabled = false;
            
            // 滚动到播放器
            playerSection.scrollIntoView({ behavior: 'smooth' });
            
            // 显示成功通知和测速结果
            const responseTime = speedTestResults.find(r => r.index === bestApiIndex)?.responseTime;
            const timeDisplay = responseTime ? ` (${Math.round(responseTime)}ms)` : '';
            
            showNotification(`视频解析成功！使用最佳接口：${bestApi.name}${timeDisplay}`, 'success');
            updateStatus(`解析成功，正在播放 ${platform} 视频`, 'success');
            
            // 添加重试机制，包含智能测速结果
            addRetryMechanism(url, platform);
            
        } catch (error) {
            parseBtn.innerHTML = '<i class="fas fa-search"></i> 智能解析';
            parseBtn.disabled = false;
            showNotification('智能解析失败，请稍后重试', 'error');
            updateStatus('解析失败，请检查链接或网络连接', 'error');
        }

    // 尝试使用 DPlayer
    async function tryDPlayerFirst(videoUrl, videoInfo) {
        try {
            // 检查是否支持 DPlayer
            if (typeof DPlayer === 'undefined') {
                console.warn('DPlayer 未加载');
                return false;
            }
            
            // 对于某些解析接口，直接提取视频流URL
            const directVideoUrl = await extractDirectVideoUrl(videoUrl);
            const finalUrl = directVideoUrl || videoUrl;
            
            return initializeDPlayer(finalUrl, videoInfo);
        } catch (error) {
            console.error('DPlayer 尝试失败:', error);
            return false;
        }
    }

    // 提取直接视频流URL (可选功能)
    async function extractDirectVideoUrl(parseUrl) {
        // 这里可以添加逻辑来提取直接的视频流URL
        // 目前直接返回null，使用原始解析URL
        return null;
    }
    }

    // 智能测速函数 - 重新设计为实际测试解析接口
    async function performSpeedTest() {
        if (isSpeedTesting) return;
        
        isSpeedTesting = true;
        speedTestResults = [];
        
        // 获取当前输入的视频链接进行测试
        const testVideoUrl = videoUrlInput.value.trim();
        if (!testVideoUrl) {
            isSpeedTesting = false;
            return;
        }
        
        updateStatus('正在测试所有解析接口速度...', 'info');
        
        const testPromises = apiList.map(async (api, index) => {
            try {
                const startTime = performance.now();
                const fullParseUrl = api.url + encodeURIComponent(testVideoUrl);
                
                // 实际测试解析接口的响应速度
                const testResult = await testParseInterface(fullParseUrl, api.name, index);
                
                const endTime = performance.now();
                const responseTime = endTime - startTime;
                
                return {
                    index: index,
                    responseTime: responseTime,
                    available: testResult.success,
                    error: testResult.error,
                    loadTime: testResult.loadTime
                };
            } catch (error) {
                return {
                    index: index,
                    responseTime: 15000, // 给失败的接口一个很高的时间惩罚
                    available: false,
                    error: error.message,
                    loadTime: 0
                };
            }
        });
        
        try {
            // 显示测试进度
            showTestProgress();
            
            speedTestResults = await Promise.all(testPromises);
            
            // 过滤出可用的接口并按速度排序
            const availableResults = speedTestResults.filter(r => r.available);
            
            if (availableResults.length > 0) {
                availableResults.sort((a, b) => a.responseTime - b.responseTime);
                bestApiIndex = availableResults[0].index;
                
                const bestApi = apiList[bestApiIndex];
                const responseTime = Math.round(availableResults[0].responseTime);
                
                updateStatus(`智能测速完成！最佳接口：${bestApi.name} (${responseTime}ms)`, 'success');
                showNotification(`已选择最快接口：${bestApi.name}`, 'success');
            } else {
                // 如果所有接口都不可用，使用默认第一个
                bestApiIndex = 0;
                updateStatus('所有接口测试失败，使用默认接口', 'warning');
                showNotification('接口测试失败，将使用默认接口尝试播放', 'warning');
            }
            
        } catch (error) {
            bestApiIndex = 0;
            updateStatus('智能测速失败，使用默认接口', 'error');
            showNotification('智能测速失败，使用默认接口', 'error');
        } finally {
            isSpeedTesting = false;
            hideTestProgress();
        }
    }

    // 测试解析接口的实际响应
    async function testParseInterface(parseUrl, apiName, apiIndex) {
        return new Promise((resolve) => {
            const startTime = performance.now();
            const iframe = document.createElement('iframe');
            
            // 设置iframe样式
            iframe.style.display = 'none';
            iframe.style.width = '1px';
            iframe.style.height = '1px';
            iframe.style.position = 'absolute';
            iframe.style.left = '-9999px';
            
            let resolved = false;
            let loadStarted = false;
            
            // 设置超时
            const timeout = setTimeout(() => {
                if (!resolved) {
                    resolved = true;
                    cleanup();
                    resolve({
                        success: false,
                        error: '响应超时',
                        loadTime: performance.now() - startTime
                    });
                }
            }, 8000); // 8秒超时
            
            // 清理函数
            const cleanup = () => {
                clearTimeout(timeout);
                if (iframe.parentNode) {
                    document.body.removeChild(iframe);
                }
                updateApiTestStatus(apiIndex, resolved ? 'completed' : 'timeout');
            };
            
            // 监听加载事件
            iframe.onload = () => {
                if (!resolved) {
                    resolved = true;
                    const loadTime = performance.now() - startTime;
                    cleanup();
                    
                    // 检查iframe是否真正加载了内容
                    setTimeout(() => {
                        resolve({
                            success: true,
                            error: null,
                            loadTime: loadTime
                        });
                    }, 500); // 给iframe一些时间来渲染
                }
            };
            
            // 监听错误事件
            iframe.onerror = () => {
                if (!resolved) {
                    resolved = true;
                    cleanup();
                    resolve({
                        success: false,
                        error: '加载失败',
                        loadTime: performance.now() - startTime
                    });
                }
            };
            
            // 监听加载开始
            iframe.addEventListener('loadstart', () => {
                loadStarted = true;
                updateApiTestStatus(apiIndex, 'loading');
            });
            
            // 开始测试
            updateApiTestStatus(apiIndex, 'testing');
            document.body.appendChild(iframe);
            
            try {
                iframe.src = parseUrl;
            } catch (error) {
                if (!resolved) {
                    resolved = true;
                    cleanup();
                    resolve({
                        success: false,
                        error: '设置URL失败',
                        loadTime: performance.now() - startTime
                    });
                }
            }
        });
    }

    // 显示测试进度
    function showTestProgress() {
        // 在状态区域显示详细的测试进度
        const progressHtml = `
            <div class="mt-3">
                <div class="progress mb-2">
                    <div id="speedtest-progress" class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" style="width: 0%"></div>
                </div>
                <div id="api-test-status" class="small">
                    ${apiList.map((api, index) => `
                        <div id="status-${index}" class="d-flex justify-content-between align-items-center mb-1">
                            <span>${api.name}</span>
                            <span class="text-muted">等待测试...</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
        
        // 添加到状态显示区域
        const statusDiv = statusInfo.querySelector('.alert');
        statusDiv.insertAdjacentHTML('beforeend', progressHtml);
    }

    // 隐藏测试进度
    function hideTestProgress() {
        const progressElement = document.getElementById('speedtest-progress');
        const statusElement = document.getElementById('api-test-status');
        
        if (progressElement && progressElement.parentNode) {
            progressElement.parentNode.parentNode.remove();
        }
        if (statusElement && statusElement.parentNode) {
            statusElement.remove();
        }
    }

    // 更新API测试状态
    function updateApiTestStatus(apiIndex, status) {
        const statusElement = document.getElementById(`status-${apiIndex}`);
        if (!statusElement) return;
        
        const statusSpan = statusElement.querySelector('span:last-child');
        if (!statusSpan) return;
        
        let statusText = '';
        let statusClass = 'text-muted';
        
        switch (status) {
            case 'testing':
                statusText = '正在测试...';
                statusClass = 'text-primary';
                break;
            case 'loading':
                statusText = '正在加载...';
                statusClass = 'text-info';
                break;
            case 'completed':
                statusText = '测试完成';
                statusClass = 'text-success';
                break;
            case 'timeout':
                statusText = '响应超时';
                statusClass = 'text-warning';
                break;
            case 'error':
                statusText = '测试失败';
                statusClass = 'text-danger';
                break;
        }
        
        statusSpan.textContent = statusText;
        statusSpan.className = statusClass;
        
        // 更新总体进度
        const completedCount = apiList.filter((_, index) => {
            const elem = document.getElementById(`status-${index}`);
            if (!elem) return false;
            const span = elem.querySelector('span:last-child');
            return span && !span.textContent.includes('等待') && !span.textContent.includes('测试中');
        }).length;
        
        const progressBar = document.getElementById('speedtest-progress');
        if (progressBar) {
            const percentage = (completedCount / apiList.length) * 100;
            progressBar.style.width = `${percentage}%`;
            progressBar.textContent = `${Math.round(percentage)}%`;
        }
    }

    // 添加重试机制
    function addRetryMechanism(url, platform) {
        // 在播放器下方添加重试按钮
        const retryContainer = document.createElement('div');
        retryContainer.className = 'text-center mt-3';
        retryContainer.innerHTML = `
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="retryWithNextApi('${url}', '${platform}')">
                    <i class="fas fa-redo"></i> 换个接口重试
                </button>
                <button type="button" class="btn btn-outline-info btn-sm" onclick="showApiList()">
                    <i class="fas fa-list"></i> 查看所有接口
                </button>
                <button type="button" class="btn btn-outline-success btn-sm" onclick="performSpeedTest()">
                    <i class="fas fa-tachometer-alt"></i> 重新测速
                </button>
            </div>
        `;
        
        // 移除旧的重试容器
        const oldRetry = document.querySelector('.retry-container');
        if (oldRetry) {
            oldRetry.remove();
        }
        
        retryContainer.className += ' retry-container';
        document.querySelector('#playerSection .card-body').appendChild(retryContainer);
    }

    // 全局函数：使用下一个接口重试
    window.retryWithNextApi = async function(url, platform) {
        bestApiIndex = (bestApiIndex + 1) % apiList.length;
        const api = apiList[bestApiIndex];
        
        const fullVideoUrl = api.url + encodeURIComponent(url);
        const videoInfo = {
            platform: platform,
            apiName: api.name,
            originalUrl: url,
            fullUrl: fullVideoUrl
        };
        
        // 更新界面信息
        videoTitle.textContent = `正在播放: ${platform} 视频`;
        apiNameBadge.textContent = api.name;
        
        // 尝试使用新接口
        const dplayerSuccess = deviceInfo.isMobile ? 
            false : 
            await tryDPlayerFirst(fullVideoUrl, videoInfo);
        
        if (!dplayerSuccess) {
            fallbackToIframe(videoInfo);
        }
        
        showNotification(`已切换到 ${api.name}`, 'info');
        updateStatus(`正在使用 ${api.name} 播放视频`, 'info');
    };

    // 全局函数：显示接口列表
    window.showApiList = function() {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="fas fa-list"></i> 解析接口列表</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i> 
                                点击接口可切换使用，绿色表示速度快，黄色表示中等，红色表示较慢
                            </small>
                        </div>
                        <div class="list-group">
                            ${apiList.map((api, index) => {
                                const result = speedTestResults.find(r => r.index === index);
                                const responseTime = result ? Math.round(result.responseTime) : '未测试';
                                const available = result ? result.available : true;
                                const isBest = index === bestApiIndex;
                                
                                let statusClass = 'slow';
                                let statusText = '较慢';
                                if (result && result.responseTime < 2000) {
                                    statusClass = 'fast';
                                    statusText = '快速';
                                } else if (result && result.responseTime < 5000) {
                                    statusClass = 'medium';
                                    statusText = '中等';
                                }
                                
                                return `
                                    <div class="list-group-item list-group-item-action ${isBest ? 'active' : ''}" onclick="selectApi(${index})" style="cursor: pointer;">
                                        <div class="d-flex w-100 justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <span class="api-status ${statusClass}"></span>
                                                <div>
                                                    <h6 class="mb-1">
                                                        ${api.name} 
                                                        ${isBest ? '<span class="badge bg-primary ms-2">当前最佳</span>' : ''}
                                                        ${!available ? '<span class="badge bg-danger ms-2">不可用</span>' : ''}
                                                    </h6>
                                                    <small class="text-muted">${api.url}</small>
                                                </div>
                                            </div>
                                            <div class="text-end">
                                                <div class="fw-bold">${responseTime === '未测试' ? responseTime : responseTime + 'ms'}</div>
                                                <small class="text-muted">${result ? statusText : '未测试'}</small>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            }).join('')}
                        </div>
                        <div class="mt-3 text-center">
                            <button type="button" class="btn btn-outline-primary" onclick="performSpeedTestFromModal()">
                                <i class="fas fa-sync-alt"></i> 重新测速
                            </button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        modal.addEventListener('hidden.bs.modal', function () {
            document.body.removeChild(modal);
        });
    };

    // 从模态框中重新测速
    window.performSpeedTestFromModal = async function() {
        const button = event.target;
        const originalText = button.innerHTML;
        button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> 测速中...';
        button.disabled = true;
        
        try {
            await performSpeedTest();
            // 刷新模态框内容
            const modal = bootstrap.Modal.getInstance(document.querySelector('.modal'));
            if (modal) {
                modal.hide();
                setTimeout(() => showApiList(), 300);
            }
        } catch (error) {
            showNotification('测速失败，请稍后重试', 'error');
        } finally {
            button.innerHTML = originalText;
            button.disabled = false;
        }
    };

    // 全局函数：选择特定接口
    window.selectApi = function(index) {
        bestApiIndex = index;
        const url = videoUrlInput.value.trim();
        const platform = detectPlatform(url);
        
        if (url && platform) {
            retryWithNextApi(url, platform);
        }
        
        // 关闭模态框
        const modal = bootstrap.Modal.getInstance(document.querySelector('.modal'));
        if (modal) {
            modal.hide();
        }
    };
    
    // 检测视频平台
    function detectPlatform(url) {
        // 支持的视频平台域名
        const platforms = {
            'iqiyi.com': '爱奇艺',
            'v.qq.com': '腾讯视频',
            'youku.com': '优酷',
            'mgtv.com': '芒果TV',
            'tv.sohu.com': '搜狐视频',
            'bilibili.com': '哔哩哔哩',
            '1905.com': '1905电影网',
            'pptv.com': 'PPTV'
        };
        
        try {
            const domain = new URL(url).hostname;
            
            // 检查URL是否包含支持的平台域名
            for (const key in platforms) {
                if (domain.includes(key)) {
                    return platforms[key];
                }
            }
        } catch (e) {
            return null;
        }
        
        return null;
    }
    
    // 验证URL
    function isValidUrl(url) {
        try {
            new URL(url);
            return true;
        } catch (e) {
            return false;
        }
    }
    
    // 显示通知
    function showNotification(message, type) {
        // 创建通知元素
        const notification = document.createElement('div');
        const alertType = type === 'error' ? 'danger' : 
                         type === 'warning' ? 'warning' : 
                         type === 'info' ? 'info' : 'success';
        
        notification.className = `alert alert-${alertType} notification`;
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.zIndex = '9999';
        notification.style.maxWidth = '350px';
        notification.style.padding = '12px 20px';
        notification.style.borderRadius = '8px';
        notification.style.boxShadow = '0 4px 20px rgba(0,0,0,0.15)';
        notification.style.backdropFilter = 'blur(10px)';
        notification.style.border = 'none';
        notification.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : 
                                   type === 'warning' ? 'exclamation-circle' : 
                                   type === 'info' ? 'info-circle' : 'check-circle'} me-2"></i>
                <span>${message}</span>
                <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
            </div>
        `;
        
        // 添加到页面
        document.body.appendChild(notification);
        
        // 添加进入动画
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        notification.style.transition = 'all 0.3s ease';
        
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // 4秒后自动删除
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentElement) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }
    
    // 初始化检查剪贴板
    function checkClipboard() {
        // 请求剪贴板权限并检查是否有视频URL
        if (navigator.clipboard && navigator.clipboard.readText) {
            navigator.clipboard.readText()
                .then(text => {
                    if (text && isValidUrl(text) && detectPlatform(text)) {
                        videoUrlInput.value = text;
                        showNotification('已自动粘贴剪贴板中的视频链接', 'success');
                    }
                })
                .catch(() => {
                    // 用户未授予权限或其他错误，静默失败
                });
        }
    }
    
    // 页面加载完成后检查剪贴板
    // 注：许多浏览器需要用户交互后才能访问剪贴板
    document.addEventListener('click', function() {
        // 首次点击页面时尝试检查剪贴板
        if (!window.clipboardChecked) {
            checkClipboard();
            window.clipboardChecked = true;
        }
    }, { once: true });

    // 添加页面可见性变化处理 (移动端优化)
    document.addEventListener('visibilitychange', function() {
        if (document.hidden && dplayer) {
            // 页面隐藏时暂停播放 (节省资源)
            dplayer.pause();
        }
    });

    // 网络状态监测 (移动端重要)
    if ('connection' in navigator) {
        function updateNetworkStatus() {
            const connection = navigator.connection;
            const speed = connection.effectiveType;
            
            if (speed === 'slow-2g' || speed === '2g') {
                showNotification('网络较慢，建议使用较低质量的解析接口', 'warning');
            }
        }
        
        navigator.connection.addEventListener('change', updateNetworkStatus);
        updateNetworkStatus(); // 初始检测
    }

    // 设备方向变化处理
    if (deviceInfo.isMobile) {
        window.addEventListener('orientationchange', function() {
            setTimeout(function() {
                // 方向变化后重新调整播放器尺寸
                if (dplayer) {
                    dplayer.resize();
                }
            }, 500);
        });
    }

    // 错误报告和调试信息
    window.addEventListener('error', function(e) {
        console.error('页面错误:', e.error);
        
        // 在开发模式下显示错误信息
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            showNotification('开发模式：检测到JavaScript错误，请查看控制台', 'error');
        }
    });

    // 导出设备信息供调试使用
    window.debugInfo = {
        deviceInfo: deviceInfo,
        speedTestResults: () => speedTestResults,
        currentApi: () => apiList[bestApiIndex],
        dplayerInstance: () => dplayer
    };
});
